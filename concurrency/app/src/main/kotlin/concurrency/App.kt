/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package concurrency

import kotlinx.coroutines.CoroutineName
import kotlinx.coroutines.InternalCoroutinesApi
import kotlinx.coroutines.runBlocking

@InternalCoroutinesApi
fun main() = runBlocking(CoroutineName("main")) {
//    launch {
//        delay(1000L)
//        println("Coroutines!")
//    }
//    println("Hello,")
//    delay(2000L)

//    val capital = async { getCapital() }
//    val income = async { getIncome() }
//    println("Your profit is ${income.await() - capital.await()}")

//    val timeOne = measureTimeMillis {
//        val capital = getCapital()
//        val income = getIncome()
//        println("Your profit is ${income - capital}")
//    }
//
//    val timeTwo = measureTimeMillis {
//        val capital = async { getCapital() }
//        val income = async { getIncome() }
//        println("Your profit is ${income.await() - capital.await()}")
//    }
//
//    println("Completed in $timeOne ms vs $timeTwo ms")

//    val job = launch(start = CoroutineStart.LAZY) {
//        delay(1000L)
//        println("Start new job!")
//    }
//    job.join()
//    println("Other task")

//    val job = launch {
//        delay(5000)
//        println("Start new job!")
//    }
//

//    delay(2000)
//    job.cancel(cause = CancellationException("Time is up!"))
//    println("Cancelling job...")
//    if (job.isCancelled) {
//        println("Job is cancelled because ${job.getCancellationException().message}")
//    }

//    launch(Dispatchers.Unconfined) {
//        println("Starting in ${Thread.currentThread().name}")
//        delay(1000)
//        println("Resuming in ${Thread.currentThread().name}")
//    }.start()

//    val dispatcher = newSingleThreadContext("myThread")
//    launch(dispatcher) {
//        println("Starting in ${Thread.currentThread().name}")
//        delay(1000)
//        println("Resuming in ${Thread.currentThread().name}")
//    }.start()

//    val dispatcher = newFixedThreadPoolContext(3, "myPool")
//    launch(dispatcher) {
//        println("Starting in ${Thread.currentThread().name}")
//        delay(1000)
//        println("Resuming in ${Thread.currentThread().name}")
//    }.start()

//    val channel = Channel<Int>()
//    launch(CoroutineName("v1coroutine")) {
//        println("Sending from ${Thread.currentThread().name}")
//        for (x in 1..5) channel.send(x * x)
//    }
//
//    repeat(5) { println(channel.receive()) }
//    println("Received in ${Thread.currentThread().name}")
    val total = listOf(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
    val result1 = total.distinct()
    val result2 = result1.slice(1..3)
    println(result2)
}


//suspend fun getCapital(): Int {
//    delay(1000L)
//    return 50000
//}
//
//suspend fun getIncome(): Int {
//    delay(1000L)
//    return 75000
//}
