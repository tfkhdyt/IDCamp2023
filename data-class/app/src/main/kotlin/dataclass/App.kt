/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dataclass

fun main() {
//    val user = User("Taufik", 21)
//    val dataUser = DataUser("Taufik", 21)
//    val dataUser2 = DataUser("Hidayat", 22)
//    val dataUser3 = dataUser.copy(age = 12)
//
//    println(dataUser3)

//    val dataUser = DataUser("Taufik", 21)
//    dataUser.intro()

//    val iniArrayKu = arrayOf(1, 2, 3)
//    val numberList = listOf(1, 2, 3, 4, 5)
//    val charList = listOf('a', 'b', 'c')
//    val anyList = mutableListOf('a', "Kotlin", 3, true, User("Taufik", 21))
//    println(numberList)
//    println(charList)
//    println(anyList)
//    anyList.add('d')
//    anyList.add(1, "Love")
//    anyList[3] = false
//    anyList.removeAt(0)
//    println(anyList)

//    val setA = setOf(1, 2, 4, 2, 1, 5)
//    val setB = setOf(1, 2, 4, 5)
//    val setC = setOf(1, 5, 7)
//
//    val union = setA.union(setC)
//    val intersect = setA.intersect(setC)
//
//    println(union)
//    println(intersect)

//    val capital = mapOf(
//        "Jakarta" to "Indonesia",
//        "London" to "England",
//        "New Delhi" to "India"
//    )
//
//    println(capital["Jakarta"])
//
//    val mapsKeys = capital.keys
//    val mapsValues = capital.values
//    println("Maps keys  : $mapsKeys")
//    println("Maps values: $mapsValues")
//
//    val mutableCapital = capital.toMutableMap()
//    mutableCapital["Amsterdam"] = "Netherlands"
//    mutableCapital["Berlin"] = "Germany"
//
//    println("Mutable capital: $mutableCapital")

//    val numberList = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
//    val evenList = numberList.filter { it % 2 == 0 }
//    val oddList = numberList.filterNot { it % 2 == 0 }
//    val multipliedBy5 = numberList.map { it * 5 }
//    val firstOddNumber = numberList.find { it % 2 == 1 }
//    val firstOrNullNumber = numberList.firstOrNull { it % 2 == 3 }
//    val moreThan10 = numberList.first { it > 10 }
//    val total = numberList.sum()
//    val kotlinChar = listOf('k', 'o', 't', 'l', 'i', 'n')
//    val ascendingSort = kotlinChar.sorted()
//    val descendingSort = kotlinChar.sortedDescending()
//    println(ascendingSort)
//    println(descendingSort)

//    println(evenList)
//    println(oddList)
//    println(multipliedBy5)
//    println(numberList.count())
//    println(numberList.count { it % 3 == 0 })
//    println(firstOddNumber)
//    println(firstOrNullNumber)
//    println(moreThan10)
//    println(total)

//    val list = (1..1000000).toList()
//    list.asSequence().filter { it % 5 == 0 }.map { it * 2 }
//        .forEach { println(it) }

    val sequenceNumber = generateSequence(1) { it + 1 }
    sequenceNumber.take(5).forEach { print("$it ") }
}
